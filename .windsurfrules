# The following are guidelines for writing code in TypeScript.

## General Code Style & Formatting
- Use English for all code and documentation.
- One export per file.
- Use @ for imports.
- Use comma separators for all multi-line imports.
- Do not use hard-coded styles.
- Do not use style tags in Vue templates.
- Use Tailwind CSS.
- Use Prettier for code formatting.
- Use eslint-plugin-vue for linting.
- Use TypeScript type annotations for all variables and functions.

## Naming Conventions
- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.

## Functions & Logic
- Always use composables for logic.
- Keep composables short and single-purpose (<100 lines).
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types and interfaces in specific types-files.
- Avoid deeply nested blocks by:
-- Using early returns.
-- Extracting logic into utility functions.
- Use higher-order functions (map, filter, reduce) to simplify logic.
- Use arrow functions for simple cases (<3 instructions), named functions otherwise.
- Use default parameter values instead of null/undefined checks.
- Use RO-RO (Receive Object, Return Object) for passing and returning multiple parameters.

## Data Handling
- Avoid excessive use of primitive types; encapsulate data in composite types.
- Avoid placing validation inside functionsâ€”use classes with internal validation instead.
- Prefer immutability for data:
- Use readonly for immutable properties.
- Use as const for literals that never change.
- Use type guards to narrow the type of a variable.
- Use type assertions to narrow the type of a variable.
- Use Pinia store for state management.

## Error Handling
- Use try-catch blocks to handle errors.
- Do not use nested try-catch blocks.
- Use error objects with specific properties.
- Do not use bare `catch` blocks.
- Do not use `catch-all` error handlers.
- Do not use `throw` statements.
- Do not use `return` statements in catch blocks.
- Use `finally` blocks for cleanup logic.
- Do not use `throw` statements in `finally` blocks.
- Do not use `throw` statements if they are caught locally.

## Running code

- Bun is used for the project.
- `bun run` is running by default. You do not have to run it.

# The following are guidelines for writing code in Python.

- Use type hints consistently
- Optimize for readability over premature optimization
- Write modular code
- Follow PEP8 style guide for Python code
